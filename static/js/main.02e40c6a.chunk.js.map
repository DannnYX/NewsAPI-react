{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["News","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","apiKey","curPage","endPage","searchQuery","lastRequest","loadMore","state","articles","sources","loadData","processSources","bind","handleSearchClick","json","freshArticles","length","setState","concat","e","target","id","processArticles","req","query","trim","value","keyCode","news","_this2","newItems","map","a","react_default","createElement","className","style","backgroundImage","urlToImage","href","url","title","source","name","description","button","onClick","handleLoadMoreClick","s","type","placeholder","onChange","handleSearchChange","onKeyUp","handleSearchKeyUP","handleFilterClick","func","request","Request","fetch","then","response","myJson","React","Component","App","App_News","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02e40c6a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css'\n\nfunction NewsItem(props) {\n  return (\n      <div className=\"news__item\">\n        <div className=\"news__meta\">\n          <div className=\"news__meta-photo\"\n               style={{backgroundImage: `url(\"${props.urlToImage || 'img/placeholder.jpg'}\")`}}/>\n        </div>\n        <a className=\"news__item-link\" href={props.url}>\n          <div className=\"news__description\">\n            <h2 className=\"news__description-title\">{props.title}</h2>\n            <h3 className=\"news__description-source\">{props.source.name}</h3>\n            <p className=\"news__description-content\">{props.description}</p>\n            <p className=\"news__read-more\">\n            </p>\n          </div>\n        </a>\n      </div>);\n}\n\nfunction SourceItem(props) {\n  return (\n      <button className=\"source__item\" id={props.id}>{props.name}</button>\n  );\n}\n\nclass News extends React.Component {\n  constructor(props) {\n    super(props);\n    this.apiKey = 'bcebc7a888eb4ad885163a49396d5489';\n    this.curPage = 0;\n    this.endPage = 8;\n    this.searchQuery = '';\n    this.lastRequest = '';\n    this.loadMore = true;\n    this.state = {\n      articles: [],\n      sources: []\n    }\n  }\n\n  componentDidMount() {\n    this.loadData(`sources?`, this.processSources.bind(this));\n    this.handleSearchClick();\n  }\n\n  processArticles(json) {\n    const freshArticles = json.articles;\n    if (freshArticles.length)\n      this.curPage++;\n    if (this.curPage === this.endPage || freshArticles.length < 5)\n      this.loadMore = false;\n    this.setState((state) => ({articles: state.articles.concat(json.articles)}));\n  }\n\n  processSources(json) {\n    this.setState({sources: json['sources']});\n  }\n\n  handleFilterClick(e) {\n    if (!e.target.id)\n      return;\n    this.state.articles = [];\n    this.curPage = 0;\n    this.loadMore = true;\n    this.loadData(`everything?sources=${e.target.id}`, this.processArticles.bind(this));\n  }\n\n  handleSearchClick() {\n    const req = this.searchQuery;\n    const query = req.trim() ? `everything?q=${req}` : `top-headlines?country=us`;\n    this.state.articles = [];\n    this.curPage = 0;\n    this.loadData(query, this.processArticles.bind(this));\n  }\n\n  handleSearchChange(e) {\n    this.searchQuery = e.target.value;\n  }\n\n  handleSearchKeyUP(e) {\n    if (e.keyCode === 13)\n      this.handleSearchClick(e);\n  }\n\n  handleLoadMoreClick() {\n    this.loadData(null, this.processArticles.bind(this));\n  }\n\n  render() {\n    let news;\n    if (this.state.articles.length) {\n      const newItems = this.state.articles.map(a => NewsItem(a));\n      news = <div className=\"news-container\">{newItems}</div>\n    } else {\n      news = (\n          <div className=\"no-data\">\n            <span>No items found ಠ╭╮ಠ</span>\n          </div>\n      );\n    }\n    let button = this.loadMore ?\n        <button className=\"load-more-btn\"\n                onClick={(e) => this.handleLoadMoreClick(e)}>LOAD<br/>MORE\n        </button>\n        : null;\n    const sources = this.state.sources.map(s => SourceItem(s));\n    return (\n        <div className=\"content\">\n          <header>\n            <h1>Hot News Everyday</h1>\n          </header>\n          <main className=\"content\">\n            <div className=\"search-wrapper\">\n              <input type=\"text\" name=\"search\" placeholder=\"Find\" className=\"search-edit\" value={this.state.value}\n                     onChange={(e) => this.handleSearchChange(e)}\n                     onKeyUp={(e) => this.handleSearchKeyUP(e)}/>\n              <button className=\"search-btn\"\n                      onClick={(e) => this.handleSearchClick(e)}>FIND\n              </button>\n            </div>\n            <nav className=\"sources-container\"\n                 onClick={(e) => this.handleFilterClick(e)}>{sources}</nav>\n            {news}\n            {button}\n          </main>\n        </div>\n    );\n  }\n\n  loadData(query, func) {\n    if (!query) {\n      query = this.lastRequest;\n    } else {\n      this.lastRequest = query;\n    }\n    const url = `https://newsapi.org/v2/${query}&pageSize=5&page=${this.curPage + 1}&apiKey=${this.apiKey}`;\n    const request = new Request(url);\n    fetch(request).then((response) => response.json()).then((myJson) => func(myJson));\n  }\n}\n\nfunction\nApp() {\n  return <News/>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}